## Process this file with automake to generate Makefile.in.
## 19991229 mortene.

RegularSources = \
	SoDragger.cpp \
	SoCenterballDragger.cpp \
	SoDirectionalLightDragger.cpp \
	SoDragPointDragger.cpp \
	SoHandleBoxDragger.cpp \
	SoJackDragger.cpp \
	SoPointLightDragger.cpp \
	SoRotateCylindricalDragger.cpp \
	SoRotateDiscDragger.cpp \
	SoRotateSphericalDragger.cpp \
	SoScale1Dragger.cpp \
	SoScale2Dragger.cpp \
	SoScale2UniformDragger.cpp \
	SoScaleUniformDragger.cpp \
	SoSpotLightDragger.cpp \
	SoTabBoxDragger.cpp \
	SoTabPlaneDragger.cpp \
	SoTrackballDragger.cpp \
	SoTransformBoxDragger.cpp \
	SoTransformerDragger.cpp \
	SoTranslate1Dragger.cpp \
	SoTranslate2Dragger.cpp
LinkHackSources = \
	all-draggers-cpp.cpp
PublicHeaders = 
PrivateHeaders =
ObsoleteHeaders =

ExtraIncludeDirs = -I$(top_builddir)

##$ BEGIN TEMPLATE Make-Common(draggers, draggers)
# **************************************************************************
# This template depends on the following variables having been set up before
# its invokation.
#
# PublicHeaders    - header files that should be installed
# PrivateHeaders   - source files that should be distributed, but not
#                    installed - including source-included source files.
# RegularSources   - source files compiled in this directory
# LinkHackSources  - alternative source files used on -enable-compact compilation
# ObsoletedHeaders - header files that should be removed upon installation

# Everything below is autogenerated from a macro, so don't modify
# within the Makefile.am itself. 19991201 mortene.

DISTCLEANFILES = \
	ii_files/*.ii

if HACKING_COMPACT_BUILD
BuildSources = $(LinkHackSources)
ExtraSources = $(RegularSources)
else
BuildSources = $(RegularSources)
ExtraSources = $(LinkHackSources)
endif

if BUILD_WITH_MSVC
noinst_LIBRARIES = draggers.lst
else
if HACKING_DYNAMIC_MODULES
lib_LTLIBRARIES = libdraggers@SUFFIX@LINKHACK.la
else
noinst_LTLIBRARIES = libdraggers.la
endif
endif

# Remove any linklibraries detected by configure, as they are not
# needed in the submodules -- only in the toplevel libCoin build.
LIBS = 

DEFAULT_INCLUDES = -I$(top_builddir)/include -I$(top_srcdir)/include $(ExtraIncludeDirs) -I$(top_builddir)/src -I$(top_srcdir)/src

# header installation
if MAC_FRAMEWORK
libdraggersincdir = $(MAC_FRAMEWORK_PREFIX)/$(MAC_FRAMEWORK_NAME).framework/Versions/$(MAC_FRAMEWORK_VERSION)/Headers/draggers
# hack to change libdir value when installing Mac OS X compiler framework
lib@nop@dir = $(MAC_FRAMEWORK_PREFIX)/$(MAC_FRAMEWORK_NAME).framework/Versions/$(MAC_FRAMEWORK_VERSION)/Libraries
else
libdraggersincdir = $(includedir)/Inventor/draggers
endif
libdraggersinc_HEADERS = $(PublicHeaders)

libdraggers_la_SOURCES = $(BuildSources)
EXTRA_libdraggers_la_SOURCES = \
	$(PublicHeaders) $(PrivateHeaders) $(ExtraSources)

libdraggers@SUFFIX@LINKHACK_la_SOURCES = $(BuildSources)
EXTRA_libdraggers@SUFFIX@LINKHACK_la_SOURCES = \
	$(PublicHeaders) $(PrivateHeaders) $(ExtraSources)

draggers_lst_SOURCES = $(BuildSources)
EXTRA_draggers_lst_SOURCES = \
	$(PublicHeaders) $(PrivateHeaders) $(ExtraSources)

# this rule causes a make warning, so we remove it when it is not in use
draggers.lst: Makefile $(draggers_lst_OBJECTS)
	@echo "Linking draggers.lst..."; \
	rm -f $@; touch $@; \
	for i in $(draggers_lst_OBJECTS); do echo $$i >>$@; done

install-libdraggersincHEADERS: $(libdraggersinc_HEADERS)
	@$(NORMAL_INSTALL)
	@if test x"$(libdraggersinc_HEADERS)" = x""; then :; else \
	  echo " $(mkinstalldirs) $(DESTDIR)$(libdraggersincdir)"; \
	  $(mkinstalldirs) $(DESTDIR)$(libdraggersincdir); \
	fi
	@list='$(libdraggersinc_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  src="$$d$$p"; dst="$(DESTDIR)$(libdraggersincdir)/$$f"; \
	  if cmp -s "$$src" "$$dst"; then :; else \
	    echo " $(INSTALL_HEADER) $$src $$dst"; \
	    $(INSTALL_HEADER) "$$src" "$$dst" || exit 1; \
	  fi \
	done
	@list='$(ObsoletedHeaders)'; for f in $$list; do \
	  file="$(DESTDIR)$(libdraggersincdir)/$$f"; \
	  if test -x "$$file"; then \
	    echo " rm -f $$file"; \
	    rm -f "$$file"; \
	  fi \
	done; \
	:

if MACOSX
# When using --enable-hacking, the user tends to manually replace some 
# of the installed libraries by symlinks back to the build directory. 
# But Mac OS X's install program refuses to overwrite symlinks => we 
# have to explicitly remove existing symlinks before installation.
install-exec-local:
	@for file in $(DESTDIR)$(lib@nop@dir)/libdraggers@SUFFIX@LINKHACK*.dylib; do \
	  if test -L "$$file"; then \
	    rm -f "$$file"; \
	  fi \
	done; 
else 
install-exec-local:
endif

install-symlinks:
	@echo "Creating symlink to libdraggers@SUFFIX@LINKHACK*@LIBEXT@*"; \
        for dir in $(SUBDIRS) ; do \
          (cd $$dir; $(MAKE) install-symlinks;) \
        done ; \
        here=`pwd`; \
	(cd $(DESTDIR)$(lib@nop@dir); \
	for file in libdraggers@SUFFIX@LINKHACK*@LIBEXT@*; do \
	  ln -sf "$$here/.libs/$$file" "$$file"; \
	done; \
        cd -; )
##$ END TEMPLATE Make-Common
