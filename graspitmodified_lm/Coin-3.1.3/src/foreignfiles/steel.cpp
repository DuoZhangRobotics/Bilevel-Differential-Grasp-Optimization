#line 2 "steel.cpp"

#line 4 "steel.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer stl_yy_create_buffer
#define yy_delete_buffer stl_yy_delete_buffer
#define yy_flex_debug stl_yy_flex_debug
#define yy_init_buffer stl_yy_init_buffer
#define yy_flush_buffer stl_yy_flush_buffer
#define yy_load_buffer_state stl_yy_load_buffer_state
#define yy_switch_to_buffer stl_yy_switch_to_buffer
#define yyin stl_yyin
#define yyleng stl_yyleng
#define yylex stl_yylex
#define yylineno stl_yylineno
#define yyout stl_yyout
#define yyrestart stl_yyrestart
#define yytext stl_yytext
#define yywrap stl_yywrap
#define yyalloc stl_yyalloc
#define yyrealloc stl_yyrealloc
#define yyfree stl_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE stl_yyrestart(stl_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int stl_yyleng;

extern FILE *stl_yyin, *stl_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up stl_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up stl_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via stl_yyrestart()), so that the user can continue scanning by
	 * just pointing stl_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when stl_yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int stl_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow stl_yywrap()'s to do buffer switches
 * instead of setting up a fresh stl_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void stl_yyrestart (FILE *input_file  );
void stl_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE stl_yy_create_buffer (FILE *file,int size  );
void stl_yy_delete_buffer (YY_BUFFER_STATE b  );
void stl_yy_flush_buffer (YY_BUFFER_STATE b  );
void stl_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void stl_yypop_buffer_state (void );

static void stl_yyensure_buffer_stack (void );
static void stl_yy_load_buffer_state (void );
static void stl_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER stl_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE stl_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE stl_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE stl_yy_scan_bytes (yyconst char *bytes,int len  );

void *stl_yyalloc (yy_size_t  );
void *stl_yyrealloc (void *,yy_size_t  );
void stl_yyfree (void *  );

#define yy_new_buffer stl_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        stl_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            stl_yy_create_buffer(stl_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        stl_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            stl_yy_create_buffer(stl_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define stl_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *stl_yyin = (FILE *) 0, *stl_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int stl_yylineno;

int stl_yylineno = 1;

extern char *stl_yytext;
#define yytext_ptr stl_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up stl_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	stl_yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 13
#define YY_END_OF_BUFFER 14
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[142] =
    {   0,
        0,    0,   14,   12,    8,   10,    9,   12,   12,   12,
       12,   12,   12,   12,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    5,    0,    0,    0,    0,    0,    0,    6,    0,
        0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    4,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,    0,    0,    0,    0,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    1,    6,    7,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,    9,    1,   10,   11,   12,   13,
        1,    1,   14,    1,    1,   15,   16,   17,   18,   19,
        1,   20,   21,   22,   23,   24,    1,   25,    1,    1,
        1,    1,    1,    1,    1,    1,   26,    1,   27,   28,

       29,   30,    1,    1,   31,    1,    1,   32,   33,   34,
       35,   36,    1,   37,   38,   39,   40,   41,    1,   42,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[43] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[146] =
    {   0,
        0,   40,  328,  331,   80,  331,  331,    0,    0,    1,
        0,    2,    2,  324,    0,    5,    1,   15,   23,   30,
       37,    0,   41,   36,   34,   42,   39,  323,  331,  120,
       48,   43,   55,   66,   61,   85,   76,   68,   70,   68,
        3,   71,   83,   84,   89,   96,  102,  323,    5,  331,
      322,  117,  100,  114,  108,  114,  122,  134,  320,  127,
      331,  320,  115,  144,  127,  146,  122,  149,  159,  157,
      166,  331,  168,  142,  170,  313,  175,  171,  331,  317,
      182,  331,  159,  187,  311,  180,  181,  192,  309,  189,
      197,  308,  200,  188,  204,  307,  205,  312,  213,  302,

      220,  222,  300,  223,  227,  214,  331,  297,  230,  235,
      287,  238,  245,  284,  252,  250,  279,  236,  257,  265,
      264,  267,  253,  260,  275,  231,  272,  280,  206,  282,
      289,  145,  262,  296,  331,  124,  294,  301,   81,  304,
      331,   46,   24,   15,    0
    } ;

static yyconst flex_int16_t yy_def[146] =
    {   0,
      142,  142,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  143,    5,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  143,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  144,  141,  141,  141,  141,  141,  141,  144,  144,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  145,  141,  141,  141,  141,  141,  141,  145,
      145,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
        0,  141,  141,  141,  141
    } ;

static yyconst flex_int16_t yy_nxt[374] =
    {   0,
       80,    5,    6,    7,   49,   50,   49,   50,   23,   23,
       30,    8,    9,   27,   10,   59,   22,   11,   24,   26,
       12,   22,   25,   13,   28,   23,   23,   30,    8,    9,
       27,   10,   24,   22,   11,   24,   26,   12,   22,   25,
       13,    5,    6,    7,   14,   25,    4,   26,   27,   24,
       31,    8,    9,   32,   10,   33,   34,   11,   35,   40,
       12,   41,   25,   13,   26,   27,   42,   31,    8,    9,
       32,   10,   33,   34,   11,   35,   40,   12,   41,   43,
       13,   15,   44,   42,   45,   46,   36,   47,  140,   48,
       51,   16,   17,   52,   18,   53,   43,   19,   54,   44,

       20,   45,   46,   21,   47,   39,   48,   51,   16,   17,
       52,   18,   53,   55,   19,   54,   56,   20,   60,   61,
       21,   36,   39,   66,   62,   63,   64,   65,   60,   61,
       55,  138,   37,   56,   38,   68,   70,   73,   67,   74,
       39,   62,   63,   64,   65,   71,   72,   66,   18,   37,
       68,   38,  133,   70,   73,   67,   74,   39,   78,   79,
       75,   83,   67,   18,   76,   18,   77,   71,   72,   81,
       82,   75,   78,   79,   87,   76,   84,   77,   83,   67,
       18,   85,   77,   81,   82,   92,   86,   93,   88,   94,
       95,   87,   89,   88,   90,   96,   90,   89,   84,   90,

       97,   84,   98,   86,   91,   99,   94,   93,   86,  100,
      103,  101,  104,  130,   99,  106,  107,   97,  100,   98,
      101,  106,  107,   95,   95,   86,  108,  101,  110,  102,
      104,  109,  111,   97,  112,  114,  110,  115,  131,  116,
      111,  123,  112,  124,  117,  112,  106,  107,  109,  118,
       97,  119,  113,  106,  107,  120,  109,  121,  119,  115,
      124,  116,  120,  125,  121,  125,  118,  124,  116,  133,
      126,  121,  121,  109,  122,  127,  128,  132,  118,  133,
      129,  128,  130,  134,  135,  129,  122,  130,  136,  130,
      125,  115,  127,  137,  112,  118,  131,  134,  135,  139,

      127,  140,  134,  135,  113,  134,  135,  104,  138,  101,
      137,  140,  137,  105,  102,   93,   90,  127,   91,   82,
       77,   69,   61,   58,   57,   29,   29,  141,  141,  137,
        3,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141
    } ;

static yyconst flex_int16_t yy_chk[374] =
    {   0,
      145,    1,    1,    1,   41,   41,   49,   49,    9,   17,
       22,    1,    1,   13,    1,  144,    8,    1,   10,   12,
        1,   16,   11,    1,  143,    9,   17,   22,    1,    1,
       13,    1,   18,    8,    1,   10,   12,    1,   16,   11,
        1,    2,    2,    2,    2,   19,  142,   20,   21,   18,
       23,    2,    2,   24,    2,   25,   26,    2,   27,   31,
        2,   32,   19,    2,   20,   21,   33,   23,    2,    2,
       24,    2,   25,   26,    2,   27,   31,    2,   32,   34,
        2,    5,   35,   33,   37,   38,   36,   39,  139,   40,
       42,    5,    5,   43,    5,   44,   34,    5,   45,   35,

        5,   37,   38,    5,   39,   36,   40,   42,    5,    5,
       43,    5,   44,   46,    5,   45,   47,    5,   52,   52,
        5,   30,   36,   57,   53,   54,   55,   56,   60,   60,
       46,  136,   30,   47,   30,   58,   63,   65,   57,   67,
       30,   53,   54,   55,   56,   64,   64,   66,   58,   30,
       68,   30,  132,   63,   65,   57,   67,   30,   70,   70,
       69,   74,   66,   68,   69,   58,   69,   71,   71,   73,
       73,   75,   78,   78,   83,   75,   77,   75,   74,   66,
       68,   77,   77,   81,   81,   86,   77,   86,   84,   87,
       90,   83,   84,   88,   84,   90,   90,   88,   91,   88,

       90,   93,   94,   77,   91,   95,   87,   93,   91,   95,
       97,   95,   97,  129,   99,  106,  106,   90,   99,   94,
       99,  101,  101,  102,  104,   91,  101,  101,  105,  102,
      104,  101,  105,  102,  105,  109,  110,  109,  126,  112,
      110,  118,  110,  118,  112,  112,  113,  113,  101,  112,
      102,  116,  113,  115,  115,  116,  113,  116,  119,  115,
      123,  124,  119,  133,  119,  121,  112,  124,  122,  133,
      121,  121,  120,  113,  122,  121,  125,  127,  122,  127,
      125,  128,  125,  130,  130,  128,  117,  128,  130,  130,
      131,  114,  121,  130,  111,  122,  131,  134,  134,  137,

      131,  137,  138,  138,  108,  140,  140,  103,  138,  100,
      130,  140,  138,   98,   96,   92,   89,  131,   85,   80,
       76,   62,   59,   51,   48,   28,   14,    3,    0,  138,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int stl_yy_flex_debug;
int stl_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *stl_yytext;
#line 1 "steel.l"
/**************************************************************************\
 *
 *  This file is part of the Coin 3D visualization library.
 *  Copyright (C) by Kongsberg Oil & Gas Technologies.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  ("GPL") version 2 as published by the Free Software Foundation.
 *  See the file LICENSE.GPL at the root directory of this source
 *  distribution for additional information about the GNU GPL.
 *
 *  For using Coin with software that can not be combined with the GNU
 *  GPL, and for taking advantage of the additional benefits of our
 *  support services, please contact Kongsberg Oil & Gas Technologies
 *  about acquiring a Coin Professional Edition License.
 *
 *  See http://www.coin3d.org/ for more information.
 *
 *  Kongsberg Oil & Gas Technologies, Bygdoy Alle 5, 0257 Oslo, NORWAY.
 *  http://www.sim.no/  sales@sim.no  coin-support@coin3d.org
 *
\**************************************************************************/
/* ********************************************************************** *
 * TODO:
 * - API to get file position data when encountering errors
 * - implement writing
 * - read/write the two color extensions (binary only)
 * - be robust for corrupt files
 * - wtf does "A facet normal coordinate may have a leading minus sign;
 *   a vertex coordinate may not." for stl ascii files mean?  do I need to
 *   take special care because of this?  why are there no proper formal
 *   specs for the stl file formats?
 *   UPDATE: it probably means that all vertices must lie in the positive
 *   octant in the worldspace - negative coordinates in any dimension is
 *   not allowed.  might be sensible, given that STL files are generally
 *   created for use by 3D rinters.
 * - figure out how to support gzipped files (in combination with flex,
 *   memory buffer techniques will probably have to be used)
 * - cr+lf on DOS/unix for ascii files - is this a problem?
 * - remove any error-handling asserts
 * ********************************************************************** */
#line 45 "steel.l"
#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include <Inventor/system/inttypes.h>

#include "steel.h"

/* @stl_real@
This is a typedef for the C type float.  It is used so the floating point type
can be changed at a later date.  It is not likely to happen though, as the
STL file format specifies that the floats should be IEEE 32-bit floats.
 */

/* @stl_facet_s@
This is an opaque handle for one facet record in an STL file.  It contains
the position of the three vertices in the triangle face, and the normal
vector.  For binary STL files, there is also two bytes of padding data
that is used for color information in a couple of STL format extensions,
which is also accessible with this data type.
 */

struct stl_facet_s {
  stl_real nx, ny, nz;
  stl_real v1x, v1y, v1z;
  stl_real v2x, v2y, v2z;
  stl_real v3x, v3y, v3z;
  unsigned int color;
};

/* @stl_reader_s@
This is an opaque handle for an STL file that is opened for reading.
Both ascii and binary file access is handled with this type.
 */

struct stl_reader_s {
  char * filename;
  FILE * file;
  char * info;
  stl_facet * facet;
  const char * error;
  unsigned int flags;
  unsigned int linenum;
  int pending;
  int vertex;
  int facets;
  int facets_total;
  int hickups;
};

/* @stl_writer_s@
This is an opaque handle for an STL file that is opened for writing.
 */

struct stl_writer_s {
  char * filename;
  FILE * file;
  char * info;
  const char * error;
  int facets;
  unsigned int flags;
  stl_facet * facet;
  int linenum;
};

/* prototypes for internal functions used in lex part */
static int stl_parse_real_triple(char * text, stl_real * a, stl_real * b, stl_real * c);

#define STL_PUBLIC_FLAGS 0x000000ff
#define STL_NO_PENDING   ((STL_ERROR) - 1)
#define YY_DECL          int stl_scan(stl_reader * reader)
#define YY_NO_INPUT 1
#line 718 "steel.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int stl_yylex_destroy (void );

int stl_yyget_debug (void );

void stl_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE stl_yyget_extra (void );

void stl_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *stl_yyget_in (void );

void stl_yyset_in  (FILE * in_str  );

FILE *stl_yyget_out (void );

void stl_yyset_out  (FILE * out_str  );

int stl_yyget_leng (void );

char *stl_yyget_text (void );

int stl_yyget_lineno (void );

void stl_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int stl_yywrap (void );
#else
extern int stl_yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( stl_yytext, stl_yyleng, 1, stl_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( stl_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( stl_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, stl_yyin))==0 && ferror(stl_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(stl_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int stl_yylex (void);

#define YY_DECL int stl_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after stl_yytext and stl_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( stl_yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(stl_yytext[stl_yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 137 "steel.l"


#line 904 "steel.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! stl_yyin )
			stl_yyin = stdin;

		if ( ! stl_yyout )
			stl_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			stl_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				stl_yy_create_buffer(stl_yyin,YY_BUF_SIZE );
		}

		stl_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of stl_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 142 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 141 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up stl_yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up stl_yytext again */
YY_RULE_SETUP
#line 139 "steel.l"
{
	  char * ptr = stl_yytext;
	  while ( *ptr == ' ' || *ptr == '\t' ) ptr++;
	  while ( *ptr != ' ' && *ptr != '\t' ) ptr++;
	  while ( *ptr && (*ptr == ' ' || *ptr == '\t') ) ptr++;
	  if ( strlen(ptr) > 0 ) {
	    reader->info = (char *) malloc(strlen(ptr)+1);
	    assert(reader->info);
	    strcpy(reader->info, ptr);
	    reader->pending = STL_INIT_INFO;
	  } else {
	    reader->pending = STL_NO_PENDING;
	  }
	  return STL_BEGIN;
	}
	YY_BREAK
case 2:
*yy_cp = (yy_hold_char); /* undo effects of setting up stl_yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up stl_yytext again */
YY_RULE_SETUP
#line 155 "steel.l"
{
	  reader->hickups = 0; /* reset flex hickup counter */
	  assert(reader->facet != NULL);
	  if ( reader->info != NULL ) {
	    free(reader->info);
	    reader->info = NULL;
	  }
	  stl_parse_real_triple(stl_yytext, &(reader->facet->nx), &(reader->facet->ny), &(reader->facet->nz));
	}
	YY_BREAK
case 3:
*yy_cp = (yy_hold_char); /* undo effects of setting up stl_yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up stl_yytext again */
YY_RULE_SETUP
#line 165 "steel.l"
{
	  reader->vertex = 0;
	}
	YY_BREAK
case 4:
*yy_cp = (yy_hold_char); /* undo effects of setting up stl_yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up stl_yytext again */
YY_RULE_SETUP
#line 169 "steel.l"
{
	  stl_real x = 0.0f, y = 0.0f, z = 0.0f;
	  assert(reader->facet != NULL);
	  stl_parse_real_triple(stl_yytext, &x, &y, &z);
	  switch ( reader->vertex ) {
	  case 0:
	    reader->facet->v1x = x;
	    reader->facet->v1y = y;
	    reader->facet->v1z = z;
	    break;
	  case 1:
	    reader->facet->v2x = x;
	    reader->facet->v2y = y;
	    reader->facet->v2z = z;
	    break;
	  case 2:
	    reader->facet->v3x = x;
	    reader->facet->v3y = y;
	    reader->facet->v3z = z;
	    break;
	  default:
	    reader->error = "vertex data error";
	    return STL_ERROR;
	  }
	  reader->vertex++;
	}
	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up stl_yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up stl_yytext again */
YY_RULE_SETUP
#line 196 "steel.l"
{
	}
	YY_BREAK
case 6:
*yy_cp = (yy_hold_char); /* undo effects of setting up stl_yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up stl_yytext again */
YY_RULE_SETUP
#line 199 "steel.l"
{
	  reader->pending = STL_NO_PENDING;
	  return STL_FACET;
	}
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up stl_yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up stl_yytext again */
YY_RULE_SETUP
#line 204 "steel.l"
{
	  char * ptr = stl_yytext;
	  if ( reader->info != NULL ) {
	    free(reader->info);
	    reader->info = NULL;
	  }
	  /* FIXME: this scanning is now incorrect if not "endsolid" */
	  while ( *ptr && (*ptr == ' ' || *ptr == '\t') ) ptr++;
	  while ( *ptr && (*ptr != ' ' && *ptr != '\t') ) ptr++;
	  while ( *ptr && (*ptr == ' ' || *ptr == '\t') ) ptr++;
	  if ( strlen(ptr) > 0 ) {
	    reader->info = (char *) malloc(strlen(ptr)+1);
	    assert(reader->info);
	    strcpy(reader->info, ptr);
	    reader->pending = STL_END;
	    return STL_EXIT_INFO;
	  }
	  reader->pending = STL_NO_PENDING;
	  return STL_END;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 225 "steel.l"
{
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 228 "steel.l"
{
	}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 231 "steel.l"
{
	  reader->linenum++;
	}
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up stl_yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up stl_yytext again */
YY_RULE_SETUP
#line 235 "steel.l"
{
	  /* SIM extension - enable commenting out lines with # */
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 239 "steel.l"
{
	  /* 8k into sphere.stl, flex needs some help to get going again... */
	  if ( reader->hickups < 32 ) {
	    reader->hickups += 1;
	    yymore(); /* where is stl_yymore()? */
	  } else {
	    reader->error = "unknown problem - too many flex hickups";
	    reader->pending = STL_ERROR;
	    return STL_ERROR;
	  }
	}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 251 "steel.l"
{
	  reader->error = "premature end of file";
	  reader->pending = STL_ERROR;
	  return STL_ERROR;
	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 257 "steel.l"
ECHO;
	YY_BREAK
#line 1176 "steel.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed stl_yyin at a new source and called
			 * stl_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = stl_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( stl_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * stl_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of stl_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					stl_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			stl_yyrestart(stl_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) stl_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 142 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 142 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 141);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					stl_yyrestart(stl_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( stl_yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve stl_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void stl_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        stl_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            stl_yy_create_buffer(stl_yyin,YY_BUF_SIZE );
	}

	stl_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	stl_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void stl_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		stl_yypop_buffer_state();
	 *		stl_yypush_buffer_state(new_buffer);
     */
	stl_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	stl_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (stl_yywrap()) processing, but the only time this flag
	 * is looked at is after stl_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void stl_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	stl_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE stl_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) stl_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in stl_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) stl_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in stl_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	stl_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with stl_yy_create_buffer()
 * 
 */
    void stl_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		stl_yyfree((void *) b->yy_ch_buf  );

	stl_yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a stl_yyrestart() or at EOF.
 */
    static void stl_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	stl_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then stl_yy_init_buffer was _probably_
     * called from stl_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void stl_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		stl_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void stl_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	stl_yyensure_buffer_stack();

	/* This block is copied from stl_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from stl_yy_switch_to_buffer. */
	stl_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void stl_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	stl_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		stl_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void stl_yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)stl_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in stl_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)stl_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in stl_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up stl_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		stl_yytext[stl_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = stl_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		stl_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int stl_yyget_lineno  (void)
{
        
    return stl_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *stl_yyget_in  (void)
{
        return stl_yyin;
}

/** Get the output stream.
 * 
 */
FILE *stl_yyget_out  (void)
{
        return stl_yyout;
}

/** Get the length of the current token.
 * 
 */
int stl_yyget_leng  (void)
{
        return stl_yyleng;
}

/** Get the current token.
 * 
 */

char *stl_yyget_text  (void)
{
        return stl_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void stl_yyset_lineno (int  line_number )
{
    
    stl_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see stl_yy_switch_to_buffer
 */
void stl_yyset_in (FILE *  in_str )
{
        stl_yyin = in_str ;
}

void stl_yyset_out (FILE *  out_str )
{
        stl_yyout = out_str ;
}

int stl_yyget_debug  (void)
{
        return stl_yy_flex_debug;
}

void stl_yyset_debug (int  bdebug )
{
        stl_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from stl_yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    stl_yyin = stdin;
    stl_yyout = stdout;
#else
    stl_yyin = (FILE *) 0;
    stl_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * stl_yylex_init()
     */
    return 0;
}

/* stl_yylex_destroy is for both reentrant and non-reentrant scanners. */
int stl_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		stl_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		stl_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	stl_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * stl_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *stl_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *stl_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void stl_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see stl_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 257 "steel.l"



#ifndef FALSE
#define FALSE 0
#define TRUE (!FALSE)
#endif

/* ********************************************************************** */
/* internal functions */

#define STL_SCAN_TO_REAL(strptr) \
  do { \
    int roll = TRUE; \
    while ( roll ) { \
      switch ( *strptr ) { \
      case '\0': \
        return FALSE; \
      case '0': case '1': case '2': case '3': case '4': \
      case '5': case '6': case '7': case '8': case '9': \
      case '-': case '+': case '.': \
        roll = FALSE; \
        break; \
      default: \
        strptr++; \
        break; \
      } \
    } \
  } while ( FALSE )

#define STL_SCAN_TO_WHITESPACE(strptr) \
  do { \
    int roll = TRUE; \
    while ( roll ) { \
      switch ( *strptr ) { \
      case '\0': \
        return FALSE; \
      case ' ': case '\t': \
        roll = FALSE; \
        break; \
      default: \
        strptr++; \
        break; \
      } \
    } \
  } while ( FALSE )

int
stl_parse_real_triple(char * text, stl_real * a, stl_real * b, stl_real * c)
{
  char * real1, * real2, * real3;
  STL_SCAN_TO_REAL(text);
  real1 = text;
  STL_SCAN_TO_WHITESPACE(text);
  STL_SCAN_TO_REAL(text);
  real2 = text;
  STL_SCAN_TO_WHITESPACE(text);
  STL_SCAN_TO_REAL(text);
  real3 = text;
  if ( a ) *a = (stl_real) strtod(real1, NULL);
  if ( b ) *b = (stl_real) strtod(real2, NULL);
  if ( c ) *c = (stl_real) strtod(real3, NULL);
  return TRUE;
}

static
int
stl_host_is_bigendian(void)
{
  static int retval = -1;
  if ( retval == -1 ) {
    union {
      unsigned char bytes[4];
      uint32_t word;
    } data;
    data.word = 0x01;
    if ( data.bytes[3] == 0x01 )
      retval = TRUE;
    else
      retval = FALSE;
  }
  return retval;
}

static
uint32_t
stl_ntohl(uint32_t word)
{
  if ( stl_host_is_bigendian() ) {
    uint32_t swapped =
      ((word & 0x000000ff) << 24) | ((word & 0x0000ff00) <<  8) |
      ((word & 0x00ff0000) >>  8) | ((word & 0xff000000) >> 24);
    return swapped;
  }
  return word;
}

static
void
stl_reader_binary_facet(stl_reader * reader)
{
  // FIXME: use one 50-byte read operation instead
  union {
    unsigned char bytes[4];
    uint32_t data;
    float real;
  } data;
  assert(reader != NULL);
  assert(reader->file != NULL);
  assert(reader->facet != NULL);
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->nx = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->ny = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->nz = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v1x = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v1y = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v1z = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v2x = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v2y = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v2z = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v3x = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v3y = data.real;
  fread(&data.bytes, 4, 1, reader->file);
  data.data = stl_ntohl(data.data);
  reader->facet->v3z = data.real;
  fread(&data.bytes, 2, 1, reader->file);
  /* byteswap? */
  reader->facet->color = data.bytes[0] | (data.bytes[1] << 8);
  /* fprintf(stderr, "  color : 0x%04x\n", reader->facet->color); */
  reader->facets++;
}

static
int
stl_writer_put_binary_facet(stl_writer * writer, stl_facet * facet)
{
  union {
    unsigned char bytes[4];
    uint32_t data;
    float real;
  } data;
  assert(writer != NULL);
  assert(writer->file != NULL);
  assert(writer->facet != NULL);
  data.real = writer->facet->nx;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->ny;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->nz;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v1x;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v1y;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v1z;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v2x;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v2y;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v2z;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v3x;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v3y;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);
  data.real = writer->facet->v3z;
  data.data = stl_ntohl(data.data);
  fwrite(&data.bytes, 4, 1, writer->file);

  data.bytes[0] = writer->facet->color & 0xff;
  data.bytes[1] = (writer->facet->color >> 8) & 0xff;
  /* byteswap? */
  fwrite(&data.bytes, 2, 1, writer->file);
  /* fprintf(stderr, "  color : 0x%04x\n", reader->facet->color); */

  return TRUE;
}

/* ********************************************************************** */

/* @STL_STEEL_MAJOR_VERSION@
This define is the major part (#.-.-) of the steel release version number.
It is provided for knowing which version number you link with so it can
be compared to the steel version loaded at runtime.
 */

/* @STL_STEEL_MINOR_VERSION@
This define is the minor part (-.#.-) of the steel release version number.
It is provided for knowing which version number you link with so it can
be compared to the steel version loaded at runtime.
 */

/* @STL_STEEL_MICRO_VERSION@
This define is the micro part (-.-.#) of the steel release version number.
It is provided for knowing which version number you link with so it can
be compared to the steel version loaded at runtime.
 */

/* @STL_STEEL_ABI_VERSION@
This define is the ABI version of the steel library you link with.
It is provided for knowing which steel ABI you link with so it can be
compared to the ABI of the steel library loaded at runtime.
*/

/* @STL_STEEL_ABI_REVISION@
This define is the revision of the steel ABI version you link with.
It is provided for knowing which steel ABI you link with so it can be
compared to the ABI of the steel library loaded at runtime.
*/

/* @STL_STEEL_ABI_AGE@
This define is the age of the steel ABI you link with.
It is provided for knowing which steel ABI you link with so it can be
compared to the ABI of the steel library loaded at runtime.
*/

/* ********************************************************************** */

/* @stl_steel_major@
This function returns the major part (#.-.-) of the steel release version
number.
 */

int
stl_steel_major(void)
{
  return STL_STEEL_MAJOR;
}

/* @stl_steel_minor@
This function returns the minor part (-.#.-) of the steel release version
number.
 */

int
stl_steel_minor(void)
{
  return STL_STEEL_MINOR;
}

/* @stl_steel_micro@
This function returns the micro part (-.-.#) of the steel release version
number.
 */

int
stl_steel_micro(void)
{
  return STL_STEEL_MICRO;
}

/* @stl_steel_abi_version@
This function returns the version of the steel library ABI.  It is the same
as the libtool "current" number.
 */

int
stl_steel_abi_version(void)
{
  return STL_STEEL_ABI_VERSION;
}

/* @stl_steel_abi_revision@
This function returns the revision of the current steel library ABI version.
It is the same as the libtool "revision" number.
 */

int
stl_steel_abi_revision(void)
{
  return STL_STEEL_ABI_REVISION;
}

/* @stl_steel_abi_age@
This function returns the age of the current steel library ABI.
It is essentially the same as the libtool "age" number.
 */

int
stl_steel_abi_age(void)
{
  return STL_STEEL_ABI_AGE;
}

/* @stl_steel_abi_supported@
This function returns TRUE if the requested ABI version is supported and
FALSE otherwise.
 */

int
stl_steel_abi_supported(int version, int revision)
{
  if ( (version < STL_STEEL_ABI_VERSION) &&
       (version >= (STL_STEEL_ABI_VERSION - STL_STEEL_ABI_AGE)) )
    return TRUE;
  if ( (version == STL_STEEL_ABI_VERSION) &&
       (revision <= STL_STEEL_ABI_REVISION) )
    return TRUE;
  return FALSE;
}

/* ********************************************************************** */

/* @stl_facet_create_uninitialized@
 */

stl_facet *
stl_facet_create_uninitialized(void)
{
  stl_facet * facet;
  facet = (stl_facet *) malloc(sizeof(stl_facet));
  assert(facet);
  return facet;
}

/* @stl_facet_create@
 */

stl_facet *
stl_facet_create(void)
{
  stl_facet * facet;
  facet = stl_facet_create_uninitialized();
  facet->nx = facet->ny = facet->nz = 0.0f;
  facet->v1x = facet->v1y = facet->v1z = 0.0f;
  facet->v2x = facet->v2y = facet->v2z = 0.0f;
  facet->v3x = facet->v3y = facet->v3z = 0.0f;
  facet->color = STL_NO_COLOR;
  return facet;
} /* stl_facet_create() */

/* @stl_facet_clone@
 */

stl_facet *
stl_facet_clone(stl_facet * facet)
{
  stl_facet * clone;
  assert(facet != NULL);
  clone = stl_facet_create_uninitialized();
  stl_facet_copy(facet, clone);
  return clone;
} /* stl_facet_clone() */

/* @stl_facet_destroy@
 */

void
stl_facet_destroy(stl_facet * facet)
{
  assert(facet != NULL);
  free(facet);
} /* stl_facet_destroy() */

/* @stl_facet_copy@
 */

void
stl_facet_copy(stl_facet * source, stl_facet * target)
{
  assert(source != NULL && target != NULL);
  target->nx = source->nx;
  target->ny = source->ny;
  target->nz = source->nz;
  target->v1x = source->v1x;
  target->v1y = source->v1y;
  target->v1z = source->v1z;
  target->v2x = source->v2x;
  target->v2y = source->v2y;
  target->v2z = source->v2z;
  target->v3x = source->v3x;
  target->v3y = source->v3y;
  target->v3z = source->v3z;
  target->color = source->color;
} /* stl_facet_copy() */

/* @stl_facet_set_normal@
 */

void
stl_facet_set_normal(stl_facet * facet, stl_real x, stl_real y, stl_real z)
{
  assert(facet != NULL);
  facet->nx = x;
  facet->ny = y;
  facet->nz = z;
} /* stl_facet_set_normal() */

/* @stl_facet_get_normal@
 */

void
stl_facet_get_normal(stl_facet * facet, stl_real * x, stl_real * y, stl_real * z)
{
  assert(facet != NULL);
  if ( x ) *x = facet->nx;
  if ( y ) *y = facet->ny;
  if ( z ) *z = facet->nz;
} /* stl_facet_get_normal() */

/* @stl_facet_set_vertex1@
 */

void
stl_facet_set_vertex1(stl_facet * facet, stl_real x, stl_real y, stl_real z)
{
  assert(facet != NULL);
  facet->v1x = x;
  facet->v1y = y;
  facet->v1z = z;
} /* stl_facet_set_vertex1() */

/* @stl_facet_get_vertex1@
 */

void
stl_facet_get_vertex1(stl_facet * facet, stl_real * x, stl_real * y, stl_real * z)
{
  assert(facet != NULL);
  if ( x ) *x = facet->v1x;
  if ( y ) *y = facet->v1y;
  if ( z ) *z = facet->v1z;
} /* stl_facet_get_vertex1() */

/* @stl_facet_set_vertex2@
 */

void
stl_facet_set_vertex2(stl_facet * facet, stl_real x, stl_real y, stl_real z)
{
  assert(facet != NULL);
  facet->v2x = x;
  facet->v2y = y;
  facet->v2z = z;
} /* stl_facet_set_vertex2() */

/* @stl_facet_get_vertex2@
 */

void
stl_facet_get_vertex2(stl_facet * facet, stl_real * x, stl_real * y, stl_real * z)
{
  assert(facet != NULL);
  if ( x ) *x = facet->v2x;
  if ( y ) *y = facet->v2y;
  if ( z ) *z = facet->v2z;
} /* stl_facet_get_vertex2() */

/* @stl_facet_set_vertex3@
 */

void
stl_facet_set_vertex3(stl_facet * facet, stl_real x, stl_real y, stl_real z)
{
  assert(facet != NULL);
  facet->v3x = x;
  facet->v3y = y;
  facet->v3z = z;
} /* stl_facet_set_vertex3() */

/* @stl_facet_get_vertex3@
 */

void
stl_facet_get_vertex3(stl_facet * facet, stl_real * x, stl_real * y, stl_real * z)
{
  assert(facet != NULL);
  if ( x ) *x = facet->v3x;
  if ( y ) *y = facet->v3y;
  if ( z ) *z = facet->v3z;
} /* stl_facet_get_vertex3() */

/* @stl_facet_get_padding@
 */

void
stl_facet_set_padding(stl_facet * facet, unsigned int padding)
{
  assert(facet != NULL);
} /* stl_facet_set_padding() */

/* @stl_facet_get_padding@
 */

unsigned int
stl_facet_get_padding(stl_facet * facet)
{
  assert(facet != NULL);
  return 0;
} /* stl_facet_get_padding() */

/* @stl_facet_set_color@
 */

void
stl_facet_set_color(stl_facet * facet, unsigned int rgb)
{
  assert(facet != NULL);
  facet->color = rgb;
} /* stl_facet_set_color() */

/* @stl_facet_get_color@
This function returns the color of the facet, if one has been set.
 */

unsigned int
stl_facet_get_color(stl_facet * facet)
{
  assert(facet != NULL);
  return facet->color;
} /* stl_facet_get_color() */

/* ********************************************************************** */

/* @stl_reader_create@
 */

stl_reader *
stl_reader_create(const char * filename)
{
  stl_reader * reader;
  int id;
  long length;
  unsigned char bytes[4];
  assert(filename != NULL);
  reader = (stl_reader *) malloc(sizeof(stl_reader));
  assert(reader);
  reader->filename = NULL;
  reader->file = NULL;
  reader->info = NULL;
  reader->facet = NULL;
  reader->error = NULL;
  reader->flags = 0;
  reader->linenum = 0;
  reader->pending = STL_NO_PENDING;
  reader->vertex = 0;
  reader->facets = 0;
  reader->facets_total = 0;
  reader->hickups = 0;
  reader->file = fopen(filename, "rb");
  if ( reader->file == NULL ) {
    free(reader);
    return NULL;
  }
  reader->filename = (char *) malloc(strlen(filename)+1);
  assert(reader->filename);
  strcpy(reader->filename, filename);
  reader->facet = stl_facet_create();

  /* check if file is binary stl file first */
  do {
    /* FIXME: scan header for "COLOR=" for the "Materialise" color extension */
    reader->linenum = 0;
    fseek(reader->file, 0, SEEK_END);
    length = ftell(reader->file);
    fseek(reader->file, 80, SEEK_SET);
    fread(bytes, 4, 1, reader->file);
    reader->facets_total =
      (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0];
    if ( (84 + (reader->facets_total * 50)) != length ) {
      break; /* not a binary stl file */
    }
    reader->flags |= STL_BINARY;
    fseek(reader->file, 0, SEEK_SET);
    reader->info = static_cast<char *>(malloc(81));
    assert(reader->info);
    fread(reader->info, 80, 1, reader->file);
    reader->info[80] = '\0';
    fseek(reader->file, 84, SEEK_SET); /* position of first facet */
    reader->pending = STL_INIT_INFO;
    return reader;
  } while ( FALSE );

  /* now try ascii stl */
  do {
    reader->linenum = 1;
    reader->file = freopen(reader->filename, "r", reader->file);
    assert(reader->file);
    id = stl_reader_peek(reader);
    if ( id == STL_ERROR ) {
      break; /* not an ascii stl file */
    }
    fseek(reader->file, 0, SEEK_SET);
    stl_yyrestart(reader->file);
    reader->pending = STL_NO_PENDING;
    return reader;
  } while ( FALSE );

  /* the file is not an stl file */
  fclose(reader->file);
  free(reader->filename);
  reader->filename = NULL;
  stl_facet_destroy(reader->facet);
  reader->facet = NULL;
  free(reader);
  /* could return a reader with pending STL_ERROR and error message instead? */
  return NULL;
} /* stl_reader_create() */

/* @stl_reader_destroy@
 */

void
stl_reader_destroy(stl_reader * reader)
{
  assert(reader != NULL);
  if ( reader->filename ) {
    free(reader->filename);
    reader->filename = NULL;
  }
  if ( reader->info ) {
    free(reader->info);
    reader->info = NULL;
  }
  if ( reader->file ) {
    fclose(reader->file);
    reader->file = NULL;
  }
  if ( reader->facet ) {
    stl_facet_destroy(reader->facet);
    reader->facet = NULL;
  }
  free(reader);
} /* stl_reader_destroy() */

/* @stl_reader_flags@
 */

unsigned int
stl_reader_flags(stl_reader * reader)
{
  assert(reader != NULL);
  return reader->flags;
} /* stl_reader_flags() */

/* @stl_reader_peek@
 */

int
stl_reader_peek(stl_reader * reader)
{
  int peekval;
  assert(reader != NULL);
  if ( reader->pending != STL_NO_PENDING ) {
    peekval = reader->pending;
    if ( reader->pending == STL_END ) {
      reader->pending = STL_ERROR;
    }
    if ( reader->pending == STL_BEGIN ) {
      if ( reader->info != NULL ) {
        reader->pending = STL_INIT_INFO;
      } else {
        reader->pending = STL_NO_PENDING;
      }
    } else if ( reader->pending != STL_ERROR ) {
      reader->pending = STL_NO_PENDING;
    }
    return peekval;
  }
  if ( !(reader->flags & STL_BINARY) ) {
    stl_yyin = reader->file;
    peekval = stl_scan(reader);
  } else {
    if ( reader->facets == reader->facets_total ) {
      return STL_END;
    }
    stl_reader_binary_facet(reader);
    return STL_FACET;
  }
  if ( reader->error ) {
    return STL_ERROR;
  }
  return peekval;
} /* stl_reader_peek() */

/* @stl_reader_get_info@
 */

const char *
stl_reader_get_info(stl_reader * reader)
{
  assert(reader != NULL);
  return reader->info;
} /* stl_reader_get_info() */

/* @stl_reader_get_facet@
 */

stl_facet *
stl_reader_get_facet(stl_reader * reader)
{
  assert(reader != NULL);
  assert(reader->facet != NULL);
  return stl_facet_clone(reader->facet);
} /* stl_reader_get_facet() */

/* @stl_reader_fill_facet@
 */

void
stl_reader_fill_facet(stl_reader * reader, stl_facet * facet)
{
  assert(reader != NULL);
  assert(reader->facet != NULL);
  facet->nx = reader->facet->nx;
  facet->ny = reader->facet->ny;
  facet->nz = reader->facet->nz;
  facet->v1x = reader->facet->v1x;
  facet->v1y = reader->facet->v1y;
  facet->v1z = reader->facet->v1z;
  facet->v2x = reader->facet->v2x;
  facet->v2y = reader->facet->v2y;
  facet->v2z = reader->facet->v2z;
  facet->v3x = reader->facet->v3x;
  facet->v3y = reader->facet->v3y;
  facet->v3z = reader->facet->v3z;
  facet->color = reader->facet->color;
} /* stl_reader_fill_facet() */

/* @stl_reader_get_error@
 */

const char *
stl_reader_get_error(stl_reader * reader)
{
  assert(reader != NULL);
  return reader->error;
} /* stl_reader_get_error() */

/* @stl_reader_get_line_number@
 */

int
stl_reader_get_line_number(stl_reader * reader)
{
  assert(reader != NULL);
  return reader->linenum;
}

/* ********************************************************************** */

/* @stl_writer_create@
 */

stl_writer *
stl_writer_create(const char * filename, unsigned int flags)
{
  stl_writer * writer;
  assert(filename != NULL);
  writer = (stl_writer *) malloc(sizeof(stl_writer));
  assert(writer);
  writer->filename = (char *) malloc(strlen(filename)+1);
  assert(writer->filename);
  strcpy(writer->filename, filename);
  writer->flags = (flags & STL_PUBLIC_FLAGS);
  if ( writer->flags & STL_BINARY ) {
    writer->file = fopen(writer->filename, "wb");
    assert(writer->file);
    writer->linenum = 0;
  } else {
    writer->file = fopen(writer->filename, "w");
    assert(writer->file);
    writer->linenum = 1;
  }
  assert(writer->file);
  writer->facets = 0;
  writer->error = NULL;
  writer->facet = NULL;
  writer->info = NULL;
  return writer;
} /* stl_writer_create() */

/* @stl_writer_destroy@
 */

int
stl_writer_destroy(stl_writer * writer)
{
  assert(writer != NULL);
  assert(writer->file != NULL);
  if ( writer->flags & STL_BINARY ) {
    unsigned char bytes[4];
    bytes[3] = (writer->facets >> 24) & 0xff;
    bytes[2] = (writer->facets >> 16) & 0xff;
    bytes[1] = (writer->facets >> 8) & 0xff;
    bytes[0] = writer->facets & 0xff;
    fflush(writer->file);
    fseek(writer->file, 80, SEEK_SET);
    fwrite(bytes, 4, 1, writer->file);
  } else {
    fprintf(writer->file, "endsolid\n");
    writer->linenum++;
  }
  fclose(writer->file);
  writer->file = NULL;
  if ( writer->info != NULL ) {
    free(writer->info);
    writer->info = NULL;
  }
  if ( writer->facet != NULL ) {
    stl_facet_destroy(writer->facet);
    writer->facet = NULL;
  }
  free(writer);
  return STL_OK;
} /* stl_writer_destroy() */

/* @stl_writer_flags@
 */

unsigned int
stl_writer_get_flags(stl_writer * writer)
{
  assert(writer != NULL);
  return writer->flags & STL_PUBLIC_FLAGS;
} /* stl_writer_flags() */

/* @stl_writer_put_info@
 */

int
stl_writer_set_info(stl_writer * writer, const char * info)
{
  assert(writer != NULL);
  assert(writer->file != NULL);
  if ( writer->info != NULL ) {
    free(writer->info);
    writer->info = NULL;
  }
  if ( info == NULL ) {
    return STL_OK;
  }
  if ( writer->facets != 0 ) {
    writer->error =
      "programming error - info must be set before writing facets";
    return STL_ERROR;
  }
  if ( strlen(info) > 80 ) {
    writer->error = "too long info string";
    return STL_ERROR;
  }
  writer->info = (char *) malloc(strlen(info)+1);
  assert(writer->info);
  strcpy(writer->info, info);
  return STL_OK;
} /* stl_writer_put_info() */

/* @stl_writer_set_facet@
 */

void
stl_writer_set_facet(stl_writer * writer, stl_facet * facet)
{
  assert(writer);
  writer->facet = facet;
}

/* @stl_writer_get_facet@
 */

stl_facet *
stl_writer_get_facet(stl_writer * writer)
{
  assert(writer);
  return writer->facet;
}

/* @stl_writer_put_facet@
 */

int
stl_writer_put_facet(stl_writer * writer, stl_facet * facet)
{
  assert(writer != NULL);
  assert(writer->file != NULL);
  assert(facet);

  if ( writer->facets == 0 ) {
    /* write info */
    if ( writer->flags & STL_BINARY ) {
      /* FIXME: take color extension into account when constructing header */
      char header[84];
      memset(header, 0, 84);
      if ( writer->info ) {
        if ( strlen(writer->info) < 80 ) {
          strcpy(header, writer->info);
        }
      }
      if ( fwrite(header, 84, 1, writer->file) != 1 ) {
        writer->error = "writing header failed";
        return STL_ERROR;
      }
    } else {
      if ( writer->info ) {
        fprintf(writer->file, "solid %s\n", writer->info);
        free(writer->info);
        writer->info = NULL;
      } else {
        fprintf(writer->file, "solid\n");
      }
    }
  }

  if ( writer->flags & STL_BINARY ) {
    stl_writer_put_binary_facet(writer, facet);
  } else {
    float x, y, z;
    stl_facet_get_normal(facet, &x, &y, &z);
    fprintf(writer->file, "  facet normal %g %g %g\n", x, y, z);
    writer->linenum++;
    fprintf(writer->file, "    outer loop\n");
    writer->linenum++;
    stl_facet_get_vertex1(facet, &x, &y, &z);
    fprintf(writer->file, "      vertex %g %g %g\n", x, y, z);
    writer->linenum++;
    stl_facet_get_vertex2(facet, &x, &y, &z);
    fprintf(writer->file, "      vertex %g %g %g\n", x, y, z);
    writer->linenum++;
    stl_facet_get_vertex3(facet, &x, &y, &z);
    fprintf(writer->file, "      vertex %g %g %g\n", x, y, z);
    writer->linenum++;
    fprintf(writer->file, "    endloop\n");
    writer->linenum++;
    fprintf(writer->file, "  endfacet\n");
    writer->linenum++;
  }
  // fflush(writer->file);
  writer->facets++;
  return STL_OK;
} /* stl_writer_put_facet() */

/* @stl_writer_get_error@
This function returns the last error message for the writer object.
 */

const char *
stl_writer_get_error(stl_writer * writer)
{
  assert(writer != NULL);
  return writer->error;
} /* stl_writer_get_error() */

/* ********************************************************************** */
