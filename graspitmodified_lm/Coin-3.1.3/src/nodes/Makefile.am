## Process this file with automake to generate Makefile.in.
## 19990904 mortene.

RegularSources = \
	SoAnnotation.cpp \
	SoAntiSquish.cpp \
	SoArray.cpp \
	SoBaseColor.cpp \
	SoBlinker.cpp \
	SoBumpMap.cpp \
	SoBumpMapCoordinate.cpp \
	SoBumpMapTransform.cpp \
	SoCallback.cpp \
	SoCacheHint.cpp \
	SoCamera.cpp \
	SoClipPlane.cpp \
	SoColorIndex.cpp \
	SoComplexity.cpp \
	SoCoordinate3.cpp \
	SoCoordinate4.cpp \
	SoDepthBuffer.cpp \
	SoDirectionalLight.cpp \
	SoDrawStyle.cpp \
	SoEnvironment.cpp \
	SoEventCallback.cpp \
	SoExtSelection.cpp \
	SoFile.cpp \
	SoFont.cpp \
	SoFontStyle.cpp \
	SoFrustumCamera.cpp \
	SoGroup.cpp \
	SoInfo.cpp \
	SoLOD.cpp \
	SoLabel.cpp \
	SoLevelOfDetail.cpp \
	SoLight.cpp \
	SoLightModel.cpp \
	SoLinearProfile.cpp \
	SoListener.cpp \
	SoLocateHighlight.cpp \
	SoMaterial.cpp \
	SoMaterialBinding.cpp \
	SoMatrixTransform.cpp \
	SoMultipleCopy.cpp \
	SoNode.cpp \
	SoNormal.cpp \
	SoNormalBinding.cpp \
	SoNurbsProfile.cpp \
	SoOrthographicCamera.cpp \
	SoPackedColor.cpp \
	SoPathSwitch.cpp \
	SoPendulum.cpp \
	SoPerspectiveCamera.cpp \
	SoPickStyle.cpp \
	SoPointLight.cpp \
	SoPolygonOffset.cpp \
	SoProfile.cpp \
	SoProfileCoordinate2.cpp \
	SoProfileCoordinate3.cpp \
	SoResetTransform.cpp \
	SoRotation.cpp \
	SoRotationXYZ.cpp \
	SoRotor.cpp \
	SoScale.cpp \
	SoSceneTexture2.cpp \
	SoSceneTextureCubeMap.cpp \
	SoSelection.cpp \
	SoSeparator.cpp \
	SoShapeHints.cpp \
	SoShuttle.cpp \
	SoSpotLight.cpp \
	SoSurroundScale.cpp \
	SoSwitch.cpp \
	SoTexture.cpp \
	SoTexture2.cpp \
	SoTexture3.cpp \
	SoTexture2Transform.cpp \
	SoTexture3Transform.cpp \
	SoTextureCombine.cpp \
	SoTextureCoordinate2.cpp \
	SoTextureCoordinate3.cpp \
	SoTextureCoordinateBinding.cpp \
	SoTextureCoordinateCube.cpp \
	SoTextureCoordinateCylinder.cpp \
	SoTextureCoordinateSphere.cpp \
	SoTextureCoordinateDefault.cpp \
	SoTextureCoordinateEnvironment.cpp \
	SoTextureCoordinateFunction.cpp \
	SoTextureCoordinatePlane.cpp \
	SoTextureCoordinateNormalMap.cpp \
	SoTextureCoordinateReflectionMap.cpp \
	SoTextureCoordinateObject.cpp \
	SoTextureCubeMap.cpp \
	SoTextureMatrixTransform.cpp \
	SoTextureScalePolicy.cpp \
	SoTextureUnit.cpp \
	SoTransform.cpp \
	SoTransparencyType.cpp \
	SoTransformSeparator.cpp \
	SoTransformation.cpp \
	SoTranslation.cpp \
	SoUnits.cpp \
	SoUnknownNode.cpp \
	SoVertexProperty.cpp \
        SoVertexAttribute.cpp \
        SoVertexAttributeBinding.cpp \
	SoWWWAnchor.cpp \
	SoWWWInline.cpp
LinkHackSources = \
	all-nodes-cpp.cpp

PublicHeaders =
PrivateHeaders = \
        SoSubNodeP.h \
        SoUnknownNode.h \
	SoSoundElementHelper.h
ObsoleteHeaders =

##$ BEGIN TEMPLATE Make-Common(nodes, nodes)
# **************************************************************************
# This template depends on the following variables having been set up before
# its invokation.
#
# PublicHeaders    - header files that should be installed
# PrivateHeaders   - source files that should be distributed, but not
#                    installed - including source-included source files.
# RegularSources   - source files compiled in this directory
# LinkHackSources  - alternative source files used on -enable-compact compilation
# ObsoletedHeaders - header files that should be removed upon installation

# Everything below is autogenerated from a macro, so don't modify
# within the Makefile.am itself. 19991201 mortene.

DISTCLEANFILES = \
	ii_files/*.ii

if HACKING_COMPACT_BUILD
BuildSources = $(LinkHackSources)
ExtraSources = $(RegularSources)
else
BuildSources = $(RegularSources)
ExtraSources = $(LinkHackSources)
endif

if BUILD_WITH_MSVC
noinst_LIBRARIES = nodes.lst
else
if HACKING_DYNAMIC_MODULES
lib_LTLIBRARIES = libnodes@SUFFIX@LINKHACK.la
else
noinst_LTLIBRARIES = libnodes.la
endif
endif

# Remove any linklibraries detected by configure, as they are not
# needed in the submodules -- only in the toplevel libCoin build.
LIBS = 

DEFAULT_INCLUDES = -I$(top_builddir)/include -I$(top_srcdir)/include $(ExtraIncludeDirs) -I$(top_builddir)/src -I$(top_srcdir)/src

# header installation
if MAC_FRAMEWORK
libnodesincdir = $(MAC_FRAMEWORK_PREFIX)/$(MAC_FRAMEWORK_NAME).framework/Versions/$(MAC_FRAMEWORK_VERSION)/Headers/nodes
# hack to change libdir value when installing Mac OS X compiler framework
lib@nop@dir = $(MAC_FRAMEWORK_PREFIX)/$(MAC_FRAMEWORK_NAME).framework/Versions/$(MAC_FRAMEWORK_VERSION)/Libraries
else
libnodesincdir = $(includedir)/Inventor/nodes
endif
libnodesinc_HEADERS = $(PublicHeaders)

libnodes_la_SOURCES = $(BuildSources)
EXTRA_libnodes_la_SOURCES = \
	$(PublicHeaders) $(PrivateHeaders) $(ExtraSources)

libnodes@SUFFIX@LINKHACK_la_SOURCES = $(BuildSources)
EXTRA_libnodes@SUFFIX@LINKHACK_la_SOURCES = \
	$(PublicHeaders) $(PrivateHeaders) $(ExtraSources)

nodes_lst_SOURCES = $(BuildSources)
EXTRA_nodes_lst_SOURCES = \
	$(PublicHeaders) $(PrivateHeaders) $(ExtraSources)

# this rule causes a make warning, so we remove it when it is not in use
nodes.lst: Makefile $(nodes_lst_OBJECTS)
	@echo "Linking nodes.lst..."; \
	rm -f $@; touch $@; \
	for i in $(nodes_lst_OBJECTS); do echo $$i >>$@; done

install-libnodesincHEADERS: $(libnodesinc_HEADERS)
	@$(NORMAL_INSTALL)
	@if test x"$(libnodesinc_HEADERS)" = x""; then :; else \
	  echo " $(mkinstalldirs) $(DESTDIR)$(libnodesincdir)"; \
	  $(mkinstalldirs) $(DESTDIR)$(libnodesincdir); \
	fi
	@list='$(libnodesinc_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  src="$$d$$p"; dst="$(DESTDIR)$(libnodesincdir)/$$f"; \
	  if cmp -s "$$src" "$$dst"; then :; else \
	    echo " $(INSTALL_HEADER) $$src $$dst"; \
	    $(INSTALL_HEADER) "$$src" "$$dst" || exit 1; \
	  fi \
	done
	@list='$(ObsoletedHeaders)'; for f in $$list; do \
	  file="$(DESTDIR)$(libnodesincdir)/$$f"; \
	  if test -x "$$file"; then \
	    echo " rm -f $$file"; \
	    rm -f "$$file"; \
	  fi \
	done; \
	:

if MACOSX
# When using --enable-hacking, the user tends to manually replace some 
# of the installed libraries by symlinks back to the build directory. 
# But Mac OS X's install program refuses to overwrite symlinks => we 
# have to explicitly remove existing symlinks before installation.
install-exec-local:
	@for file in $(DESTDIR)$(lib@nop@dir)/libnodes@SUFFIX@LINKHACK*.dylib; do \
	  if test -L "$$file"; then \
	    rm -f "$$file"; \
	  fi \
	done; 
else 
install-exec-local:
endif

install-symlinks:
	@echo "Creating symlink to libnodes@SUFFIX@LINKHACK*@LIBEXT@*"; \
        for dir in $(SUBDIRS) ; do \
          (cd $$dir; $(MAKE) install-symlinks;) \
        done ; \
        here=`pwd`; \
	(cd $(DESTDIR)$(lib@nop@dir); \
	for file in libnodes@SUFFIX@LINKHACK*@LIBEXT@*; do \
	  ln -sf "$$here/.libs/$$file" "$$file"; \
	done; \
        cd -; )
##$ END TEMPLATE Make-Common
