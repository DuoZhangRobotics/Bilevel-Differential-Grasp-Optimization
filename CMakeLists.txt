PROJECT(LibDiff)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

#COMPILE SETTINGS
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/")
SET(CUDA_SEPARABLE_COMPILATION ON)
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  MESSAGE(STATUS "Build type: Debug")
  IF(MSVC)
    ADD_DEFINITIONS(-D_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj -Wall -std=c++11 ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O0 -Wall -fPIC -std=c++11 -Wno-unused-function -Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ELSE()
  MESSAGE(STATUS "Build type: Release")
  IF(MSVC)
    ADD_DEFINITIONS(-D_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj -Wall -std=c++11 ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O3 -Wall -fPIC -std=c++11 -Wno-unused-function -Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})
#SET(CUDA_NVCC_FLAGS "-std=c++11")

SET(WITH_CGAL ON)
SET(WITH_CUDA OFF)
SET(WITH_QUASISTATIC ON)
SET(WITH_DEFORMABLE OFF)
SET(WITH_ENVIRONMENT ON)
SET(WITH_OPTIMIZER ON)
SET(WITH_TRAJ_OPT OFF)

SET(ENABLE_PYTHON OFF)
SET(TRAJ_OPT_EXAMPLE OFF)
SET(DEFORMABLE_EXAMPLE OFF)
SET(QUASISTATIC_EXAMPLE ON)
SET(ARTICULATED_EXAMPLE OFF)

#THIRD PARTY HEADERS
#ADD_DEFINITIONS(-DALL_TYPES)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hh)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cc ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.c)
  FILE(GLOB_RECURSE cuda_source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cu)
ENDMACRO(SEARCH_SOURCE)
IF(WITH_TRAJ_OPT)
  ADD_DEFINITIONS(-DTRAJ_OPT_SUPPORT)
  SEARCH_SOURCE(TrajOpt TrajOpt)
ENDIF(WITH_TRAJ_OPT)
IF(WITH_OPTIMIZER)
  ADD_DEFINITIONS(-DOPTIMIZER_SUPPORT)
  SEARCH_SOURCE(Optimizer Optimizer)
ENDIF(WITH_OPTIMIZER)
SEARCH_SOURCE(CommonFile CommonFile)
IF(WITH_ENVIRONMENT)
  ADD_DEFINITIONS(-DENVIRONMENT_SUPPORT)
  SEARCH_SOURCE(Environment Environment)
ENDIF(WITH_ENVIRONMENT)
SEARCH_SOURCE(Articulated Articulated)
IF(WITH_DEFORMABLE)
  ADD_DEFINITIONS(-DDEFORMABLE_SUPPORT)
  SEARCH_SOURCE(Deformable Deformable)
ENDIF(WITH_DEFORMABLE)
IF(WITH_QUASISTATIC)
  ADD_DEFINITIONS(-DQUASISTATIC_SUPPORT)
  SEARCH_SOURCE(Quasistatic Quasistatic)
ENDIF(WITH_QUASISTATIC)
SEARCH_SOURCE(Utils Utils)

#LIBRARY
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")

#BUILD CUDA_LIBRARY
IF(WITH_CUDA)
  CUDA_ADD_LIBRARY(LibDiffGPU SHARED ${cuda_sourceDeformable})
ENDIF(WITH_CUDA)

#BUILD LIBRARY
ADD_LIBRARY(LibDiff SHARED
    ${sourceKnitro}
    ${sourceUtils} ${headerUtils}
    ${sourceqpOASES} ${headerqpOASES}
    ${sourceTrajOpt} ${headerTrajOpt}
    ${sourceOptimizer} ${headerOptimizer}
    ${sourceCommonFile} ${headerCommonFile}
    ${sourceEnvironment} ${headerEnvironment}
    ${sourceArticulated} ${headerArticulated}
    ${sourceQuasistatic} ${headerQuasistatic}
    ${sourceDeformable} ${headerDeformable})
TARGET_LINK_LIBRARIES(LibDiff stdc++fs ${ALL_LIBRARIES} ${ALL_STATIC_LIBRARIES})

#EXE
MACRO(ADD_EXE NAME)
  IF(WITH_CUDA)
    CUDA_ADD_EXECUTABLE(${NAME} Main/${NAME}.cpp)
    IF(MSVC)
      TARGET_LINK_LIBRARIES(${NAME} LibDiff LibDiffGPU ${ALL_STATIC_LIBRARIES})
    ELSE(MSVC)
      TARGET_LINK_LIBRARIES(${NAME} LibDiff LibDiffGPU gomp ${ALL_STATIC_LIBRARIES})
    ENDIF(MSVC)
  ELSE(WITH_CUDA)
    ADD_EXECUTABLE(${NAME} Main/${NAME}.cpp)
    IF(MSVC)
      TARGET_LINK_LIBRARIES(${NAME} LibDiff ${ALL_STATIC_LIBRARIES})
    ELSE(MSVC)
      TARGET_LINK_LIBRARIES(${NAME} LibDiff gomp ${ALL_STATIC_LIBRARIES})
    ENDIF(MSVC)
  ENDIF(WITH_CUDA)
ENDMACRO(ADD_EXE)

IF(ARTICULATED_EXAMPLE)
  ADD_EXE(mainDebugEnvironment)
  #ADD_EXE(mainArticulatedLoader)
  #ADD_EXE(mainSimplifiedDynamics)
  #ADD_EXE(mainDebugPBDSimulatorChain)
  #ADD_EXE(mainDebugMDPSimulatorChain)
  #ADD_EXE(mainDebugMDPSimulatorSpider)
  #ADD_EXE(mainDebugPBTOSimulatorRobosimian)
  #ADD_EXE(mainDebugPBDGradientInfo)
  #ADD_EXE(mainDebugNEGradientInfo)
  ADD_EXE(mainDebugSeparatingPlane)
  #ADD_EXE(mainDebugJoint)
  #ADD_EXE(mainDebugMDP)
  ADD_EXE(mainKukaArm)
ENDIF()

IF(QUASISTATIC_EXAMPLE)
  ADD_EXE(mainDebugQP)
  ADD_EXE(mainDebugFGT)
  ADD_EXE(mainGraspPlan)
  ADD_EXE(mainPointCloudObject)
  ADD_EXE(mainDebugRegistration)
  ADD_EXE(mainObjectRegister)
  ADD_EXE(mainObjectSettle)
  ADD_EXE(mainGripper)
  ADD_EXE(mainEvaluate)
ENDIF()

IF(TRAJ_OPT_EXAMPLE)
  ADD_EXE(mainDebugTrajOpt)
  ADD_EXE(mainSpiderTrajOptPBTO)
  ADD_EXE(mainSpiderTrajOptPBTOLP)
  ADD_EXE(mainSpiderTrajOptPhaseBased)
  ADD_EXE(mainSpiderTrajOptPhaseBasedSimplified)
  ADD_EXE(mainSpiderTrajOptPhaseBasedSimplifiedNE)
  ADD_EXE(mainRobosimianTrajOptPBTO)
  ADD_EXE(mainRobosimianTrajOptPBTOLP)
  ADD_EXE(mainRobosimianTrajOptPhaseBased)
  ADD_EXE(mainRobosimianTrajOptPhaseBasedNE)
ENDIF()

IF(DEFORMABLE_EXAMPLE)
  ADD_EXE(mainDebugSVD)
  ADD_EXE(mainDebugFEM2D)
  ADD_EXE(mainDebugFEM2DReduced)
  ADD_EXE(mainDebugFEM3D)
  ADD_EXE(mainDebugFEM3DReduced)
  ADD_EXE(mainSoftGripper)
  ADD_EXE(mainDebugSweepAndPrune)
  ADD_EXE(mainDebugSimulatorPacking)
  ADD_EXE(mainDebugPolynomial)
  ADD_EXE(mainDebugIntegrate)
  ADD_EXE(mainDebugNNHTP)
  ADD_EXE(mainDebugDFDX)
  ADD_EXE(mainDebugDEDX)
ENDIF()

#PYTHON
SET(PYBIND11_PYTHON_VERSION 2.7)
IF(ENABLE_PYTHON)
  MESSAGE(STATUS "Building pyLibDiff!")
  ADD_SUBDIRECTORY(pybind11)
  PYBIND11_ADD_MODULE(pyLibDiff MODULE pyLibDiff.cpp)
  TARGET_LINK_LIBRARIES(pyLibDiff LibDiff)
ENDIF(ENABLE_PYTHON)
