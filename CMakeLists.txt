PROJECT(DiffNE)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

#COMPILE SETTINGS
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/")
SET(CUDA_SEPARABLE_COMPILATION ON)
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  MESSAGE(STATUS "Build type: Debug")
  IF(MSVC)
    ADD_DEFINITIONS(-D_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj -Wall -std=c++11 ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O0 -Wall -fPIC -std=c++11 -Wno-unused-function -Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ELSE()
  MESSAGE(STATUS "Build type: Release")
  IF(MSVC)
    ADD_DEFINITIONS(-D_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj -Wall -std=c++11 ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O3 -Wall -fPIC -std=c++11 -Wno-unused-function -Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})
#SET(CUDA_NVCC_FLAGS "-std=c++11")

SET(WITH_GRASP ON)
SET(WITH_ENVIRONMENT ON)
SET(WITH_OPTIMIZER ON)
SET(WITH_CGAL ON)

SET(ARTICULATED_EXAMPLE ON)
SET(GRASP_EXAMPLE ON)
SET(TRAJ_OPT_EXAMPLE OFF)
SET(DEFORMABLE_EXAMPLE OFF)

#THIRD PARTY HEADERS
#ADD_DEFINITIONS(-DALL_TYPES)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hh)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cc ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.c)
  FILE(GLOB_RECURSE cuda_source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cu)
ENDMACRO(SEARCH_SOURCE)
IF(WITH_OPTIMIZER)
  ADD_DEFINITIONS(-DOPTIMIZER_SUPPORT)
  SEARCH_SOURCE(Optimizer Optimizer)
ENDIF(WITH_OPTIMIZER)
SEARCH_SOURCE(CommonFile CommonFile)
IF(WITH_ENVIRONMENT)
  ADD_DEFINITIONS(-DENVIRONMENT_SUPPORT)
  SEARCH_SOURCE(Environment Environment)
ENDIF(WITH_ENVIRONMENT)
SEARCH_SOURCE(Articulated Articulated)
IF(WITH_GRASP)
  ADD_DEFINITIONS(-DGRASP_SUPPORT)
  SEARCH_SOURCE(Grasp Grasp)
ENDIF(WITH_GRASP)
SEARCH_SOURCE(Utils Utils)

#LIBRARY
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")

#BUILD LIBRARY
ADD_LIBRARY(DiffNE SHARED
    ${sourceUtils} ${headerUtils}
    ${sourceOptimizer} ${headerOptimizer}
    ${sourceCommonFile} ${headerCommonFile}
    ${sourceEnvironment} ${headerEnvironment}
    ${sourceArticulated} ${headerArticulated}
    ${sourceGrasp} ${headerGrasp}
    ${sourceqpOASES} ${headerqpOASES})
TARGET_LINK_LIBRARIES(DiffNE stdc++fs ${ALL_LIBRARIES} ${ALL_STATIC_LIBRARIES})

#EXE
MACRO(ADD_EXE NAME)
  ADD_EXECUTABLE(${NAME} Main/${NAME}.cpp)
  IF(MSVC)
    TARGET_LINK_LIBRARIES(${NAME} DiffNE ${ALL_STATIC_LIBRARIES})
  ELSE(MSVC)
    TARGET_LINK_LIBRARIES(${NAME} DiffNE gomp ${ALL_STATIC_LIBRARIES})
  ENDIF(MSVC)
ENDMACRO(ADD_EXE)

IF(ARTICULATED_EXAMPLE)
  ADD_EXE(mainDebugSeparatingPlane)
ENDIF()

IF(GRASP_EXAMPLE)
  ADD_EXE(mainGraspOptimize)
  ADD_EXE(mainGraspQuality)
  ADD_EXE(mainGraspPlan)
ENDIF()
